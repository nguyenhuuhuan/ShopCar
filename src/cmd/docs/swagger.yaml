definitions:
  dtos.CreateRoleRequest:
    properties:
      code:
        type: string
      role_name:
        type: string
      status:
        enum:
        - ACTIVE
        - INACTIVE
        type: string
    required:
    - code
    - role_name
    - status
    type: object
  dtos.CreateRoleResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.Role'
      meta:
        $ref: '#/definitions/dtos.Meta'
    type: object
  dtos.Meta:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  dtos.Role:
    properties:
      code:
        type: string
      created_at:
        type: integer
      id:
        type: integer
      role_name:
        type: string
      status:
        enum:
        - ACTIVE
        - INACTIVE
        type: string
      updated_at:
        type: integer
    type: object
  dtos.User:
    properties:
      created_at:
        type: integer
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      owner:
        type: string
      password:
        type: string
      phone_number:
        type: string
      provider:
        type: string
      status:
        enum:
        - ACTIVE
        - INACTIVE
        type: string
      updated_at:
        type: integer
      user_name:
        type: string
    required:
    - email
    - password
    - phone_number
    - provider
    type: object
  dtos.UserInfo:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/dtos.User'
    type: object
  dtos.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dtos.UserLoginResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.UserInfo'
      meta:
        $ref: '#/definitions/dtos.Meta'
    type: object
  dtos.UserRegisterRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      owner:
        type: string
      password:
        type: string
      phone_number:
        type: string
      provider:
        type: string
      role:
        items:
          $ref: '#/definitions/dtos.Role'
        type: array
      status:
        enum:
        - ACTIVE
        - INACTIVE
        type: string
      user_name:
        type: string
    required:
    - email
    - password
    - phone_number
    - provider
    type: object
  dtos.UserRegisterResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.UserInfo'
      meta:
        $ref: '#/definitions/dtos.Meta'
    type: object
  errors.AppError:
    properties:
      meta:
        $ref: '#/definitions/errors.ErrorMeta'
    type: object
  errors.ErrorMeta:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      description: user Login
      parameters:
      - description: data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dtos.UserLoginRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.AppError'
      security:
      - JWTAccessToken: []
      tags:
      - ShopCar
  /auth/register:
    post:
      description: Register user
      parameters:
      - description: data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dtos.UserRegisterRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserRegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.AppError'
      security:
      - JWTAccessToken: []
      tags:
      - ShopCar
  /role:
    post:
      description: Create role
      parameters:
      - description: data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateRoleRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.CreateRoleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.AppError'
      security:
      - JWTAccessToken: []
      tags:
      - ShopCar
swagger: "2.0"
